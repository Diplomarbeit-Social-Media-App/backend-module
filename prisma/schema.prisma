generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordResetToken {
  prtId   Int      @id @default(autoincrement())
  token   String
  exp     DateTime
  aId     Int      @unique
  account Account  @relation(fields: [aId], references: [aId], onDelete: Cascade)
}

model Notification {
  ntId      Int      @id @default(autoincrement())
  type      String
  timeStamp DateTime @default(now())
  seen      Boolean  @default(false)

  targetId Int
  target   User @relation("Targeted", fields: [targetId], references: [uId], onDelete: Cascade)

  userId Int?
  user   User? @relation("Referenced", fields: [userId], references: [uId], onDelete: Cascade)

  groupId Int?
  group   Group? @relation(fields: [groupId], references: [gId], onDelete: Cascade)

  eventId Int?
  event   Event? @relation(fields: [eventId], references: [eId], onDelete: Cascade)

  hostId Int?
  host   Host? @relation(fields: [hostId], references: [hId], onDelete: Cascade)

  frId Int?
  abo  AboRequest? @relation(fields: [frId], references: [frId], onDelete: SetNull)

  consumed Boolean?
}

model Location {
  lId         Int       @id @default(autoincrement())
  city        String
  street      String
  houseNumber String
  postCode    String
  country     String    @default("Austria")
  Activity    Activity?
  Event       Event?
}

model User {
  uId                     Int                       @id @default(autoincrement())
  aId                     Int                       @unique
  sentAboRequests         AboRequest[]              @relation("FromUserFA")
  receivedAboRequests     AboRequest[]              @relation("ToUserFA")
  friendedBy              Friendship[]              @relation("UserFriendedBy")
  friends                 Friendship[]              @relation("UserFriends")
  groups                  GroupMember[]
  HostRating              HostRating[]
  Message                 Message[]
  account                 Account                   @relation(fields: [aId], references: [aId], onDelete: Cascade)
  followedHosts           Host[]                    @relation("HostFollowers")
  events                  Event[]                   @relation("Participates")
  groupEventParticipation GroupEventParticipation[]
  notifications           Notification[]            @relation("Targeted")
  linkedNotifications     Notification[]            @relation("Referenced")
}

model Host {
  hId           Int            @id @default(autoincrement())
  aId           Int            @unique
  verified      Boolean        @default(false)
  companyName   String
  Activity      Activity[]
  Event         Event[]
  account       Account        @relation(fields: [aId], references: [aId], onDelete: Cascade)
  HostRating    HostRating[]
  SocialLinks   SocialLinks[]
  followedBy    User[]         @relation("HostFollowers")
  notifications Notification[]
}

model Account {
  aId                     Int                       @id @default(autoincrement())
  userName                String                    @unique
  firstName               String
  password                String
  email                   String                    @unique
  description             String
  picture                 String?
  dateOfBirth             DateTime
  disabled                Boolean                   @default(false)
  activated               Boolean                   @default(false)
  loginOs                 String                    @default("web")
  host                    Host?
  passwordResetToken      PasswordResetToken?
  token                   Token[]                   @relation("UserTokens")
  user                    User?
  createdAt               DateTime                  @default(now())
  groupMember             GroupMember[]
  admin                   AdminProfile?
  groupEventParticipation GroupEventParticipation[]
}

model Message {
  mId       Int      @id @default(autoincrement())
  text      String
  timeStamp DateTime @default(now())
  groupGId  Int
  sentBy    Int
  group     Group    @relation(fields: [groupGId], references: [gId])
  user      User     @relation(fields: [sentBy], references: [uId], onDelete: Cascade)
}

model Activity {
  aId          Int        @id @default(autoincrement())
  name         String
  openingTimes String
  description  String
  minAge       Int
  locationId   Int        @unique
  creatorId    Int
  host         Host       @relation(fields: [creatorId], references: [hId], onDelete: Cascade)
  location     Location   @relation(fields: [locationId], references: [lId])
  groups       Group[]    @relation("AttachedActivites")
  category     Category[] @relation("BelongsToCategory")
}

model AdminProfile {
  aaId    Int     @id @default(autoincrement())
  aId     Int     @unique
  account Account @relation(fields: [aId], references: [aId])
}

model Category {
  cId         Int        @id @default(autoincrement())
  description String
  name        String
  icon        String
  seasonal    Boolean
  activity    Activity[] @relation("BelongsToCategory")
}

model Event {
  eId            Int             @id @default(autoincrement())
  name           String
  startsAt       DateTime?
  endsAt         DateTime?
  description    String
  lId            Int
  locationId     Int             @unique
  minAge         Int
  creatorId      Int
  coverImage     String?
  galleryImages  String[]
  isPublic       Boolean         @default(false)
  host           Host            @relation(fields: [creatorId], references: [hId], onDelete: Cascade)
  location       Location        @relation(fields: [locationId], references: [lId])
  users          User[]          @relation("Participates")
  attachedEvents AttachedEvent[]
  notifications  Notification[]
}

model Friendship {
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  friend    User     @relation("UserFriendedBy", fields: [friendId], references: [uId], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [uId], onDelete: Cascade)

  @@id([userId, friendId])
}

model Token {
  tId        Int      @id @default(autoincrement())
  iat        DateTime @default(now())
  exp        DateTime
  type       String
  backlisted Boolean
  aId        Int
  token      String   @unique
  account    Account  @relation("UserTokens", fields: [aId], references: [aId], onDelete: Cascade)
}

model Group {
  gId          Int           @id @default(autoincrement())
  picture      String?
  name         String        @default("Party gurrrls")
  creationDate DateTime
  description  String?
  members      GroupMember[]
  messages     Message[]
  activities   Activity[]    @relation("AttachedActivites")

  events        AttachedEvent[]
  notifications Notification[]
}

model AttachedEvent {
  aeId           Int                       @id @default(autoincrement())
  suggestedBy    String
  isPublic       Boolean
  gId            Int
  Group          Group                     @relation(fields: [gId], references: [gId], onDelete: Cascade)
  eId            Int
  event          Event                     @relation(fields: [eId], references: [eId], onDelete: Cascade)
  pollEndsAt     DateTime
  image          String?
  name           String
  description    String?
  country        String                    @default("Austria")
  street         String
  postCode       String
  city           String
  houseNumber    String
  meetingPoint   String
  meetingTime    String
  participations GroupEventParticipation[]
}

model GroupEventParticipation {
  gevId          Int           @id @default(autoincrement())
  uId            Int
  aId            Int
  gmId           Int
  aeId           Int
  user           User          @relation(fields: [uId], references: [uId], onDelete: Cascade)
  account        Account       @relation(fields: [aId], references: [aId], onDelete: Cascade)
  groupMember    GroupMember   @relation(fields: [gmId], references: [gmId], onDelete: Cascade)
  vote           Boolean
  pickupOutbound Boolean       @default(false)
  pickupReturn   Boolean       @default(false)
  AttachedEvent  AttachedEvent @relation(fields: [aeId], references: [aeId], onDelete: Cascade)
}

model GroupMember {
  gmId                Int                       @id @default(autoincrement())
  uId                 Int
  aId                 Int
  gId                 Int
  isAdmin             Boolean                   @default(false)
  acceptedInvitation  Boolean                   @default(false)
  invitedAt           DateTime                  @default(now())
  group               Group                     @relation(fields: [gId], references: [gId], onDelete: Cascade)
  user                User                      @relation(fields: [uId], references: [uId], onDelete: Cascade)
  account             Account                   @relation(fields: [aId], references: [aId], onDelete: Cascade)
  eventParticipations GroupEventParticipation[]
}

model AboRequest {
  frId          Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now()) @updatedAt
  fromUserId    Int
  toUserId      Int
  fromUser      User           @relation("FromUserFA", fields: [fromUserId], references: [uId], onDelete: Cascade)
  toUser        User           @relation("ToUserFA", fields: [toUserId], references: [uId], onDelete: Cascade)
  notifications Notification[]
}

model HostRating {
  hrId        Int      @id @default(autoincrement())
  hostId      Int
  userId      Int
  points      Int
  createdAt   DateTime @default(now())
  description String?
  host        Host     @relation(fields: [hostId], references: [hId], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [uId], onDelete: Cascade)
}

model SocialLinks {
  slId Int    @id @default(autoincrement())
  type String
  link String
  hId  Int
  host Host   @relation(fields: [hId], references: [hId])
}

model quadrant {
  quadrantid Int  @id @default(autoincrement())
  xid        Int? @db.SmallInt
  yid        Int? @db.SmallInt
  xminutes   Int? @db.SmallInt
  yminutes   Int? @db.SmallInt
}

model quadrant_distances {
  quadrant1id Int    @db.SmallInt
  quadrant2id Int    @db.SmallInt
  distance    Float? @db.Real

  @@id([quadrant1id, quadrant2id])
}
