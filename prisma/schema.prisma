// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  lId         Int    @id @default(autoincrement())
  city        String
  street      String
  houseNumber String
  postCode    String
  country     String @default("Austria")
}

model User {
  uId     Int     @id @default(autoincrement())
  aId     Int     @unique
  account Account @relation(fields: [aId], references: [aId])

  friends    Friendship[] @relation("UserFriends")
  friendedBy Friendship[] @relation("UserFriendedBy")
}

model Host {
  hId      Int     @id @default(autoincrement())
  verified Boolean @default(false)
  aId      Int     @unique
  account  Account @relation(fields: [aId], references: [aId])
}

model Account {
  aId         Int      @id @default(autoincrement())
  userName    String   @unique
  firstName   String
  lastName    String
  password    String
  dateOfBirth DateTime
  email       String   @unique
  description String
  picture     String?
  disabled    Boolean  @default(false)
  host        Host?
  user        User?
  token       Token[]  @relation("UserTokens")
}

model Message {
  mId       Int      @id @default(autoincrement())
  text      String
  timeStamp DateTime @default(now())
}

model Event {
  eId      Int       @id @default(autoincrement())
  name     String
  isPublic Boolean   @default(false)
  startsAt DateTime?
  endsAt   DateTime?
}

model Friendship {
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [uId])
  friend User @relation("UserFriendedBy", fields: [friendId], references: [uId])

  @@id([userId, friendId])
}

model Token {
  tId        Int      @id @default(autoincrement())
  iat        DateTime @default(now())
  exp        DateTime
  type       String
  backlisted Boolean
  aId        Int
  account    Account  @relation("UserTokens", fields: [aId], references: [aId])
}
