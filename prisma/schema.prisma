// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  lId         Int       @id @default(autoincrement())
  city        String
  street      String
  houseNumber String
  postCode    String
  country     String    @default("Austria")
  Activity    Activity?
  Event       Event?
}

model User {
  uId           Int            @id @default(autoincrement())
  aId           Int            @unique
  account       Account        @relation(fields: [aId], references: [aId])
  friends       Friendship[]   @relation("UserFriends")
  friendedBy    Friendship[]   @relation("UserFriendedBy")
  owner         Group[]
  joinedGroups  GroupMember[]
  notifications Notification[]
  Message       Message[]
  followedHosts Host[]         @relation("HostFollowers")
  events        Event[]        @relation("Participates")
}

model Host {
  hId         Int        @id @default(autoincrement())
  verified    Boolean    @default(false)
  companyName String
  aId         Int        @unique
  account     Account    @relation(fields: [aId], references: [aId])
  Activity    Activity[]
  Event       Event[]
  followedBy  User[]     @relation("HostFollowers")
}

model Account {
  aId         Int      @id @default(autoincrement())
  userName    String   @unique
  firstName   String
  lastName    String
  password    String
  dateOfBirth DateTime
  email       String   @unique
  description String
  picture     String?
  disabled    Boolean  @default(false)
  host        Host?
  user        User?
  token       Token[]  @relation("UserTokens")
}

model Message {
  mId       Int      @id @default(autoincrement())
  text      String
  timeStamp DateTime @default(now())
  group     Group    @relation(fields: [groupGId], references: [gId])
  groupGId  Int
  sentBy    Int
  user      User     @relation(fields: [sentBy], references: [uId])
}

model Activity {
  aId          Int        @id @default(autoincrement())
  openingTimes String
  description  String
  minAge       Int
  category     Category[] @relation("BelongsToCategory")
  locationId   Int        @unique
  location     Location   @relation(fields: [locationId], references: [lId])
  creatorId    Int
  host         Host       @relation(fields: [creatorId], references: [hId])
  groups       Group[]    @relation("AttachedActivites")
}

model Category {
  cId         Int        @id @default(autoincrement())
  description String
  name        String
  icon        String
  seasonal    Boolean
  activity    Activity[] @relation("BelongsToCategory")
}

model Event {
  eId         Int       @id @default(autoincrement())
  name        String
  public      Boolean   @default(false)
  startsAt    DateTime?
  endsAt      DateTime?
  lId         Int
  minAge      Int
  description String
  locationId  Int       @unique
  location    Location  @relation(fields: [locationId], references: [lId])
  creatorId   Int
  host        Host      @relation(fields: [creatorId], references: [hId])
  groups      Group[]   @relation("AttachedEvents")
  users       User[]    @relation("Participates")
}

model Friendship {
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [uId])
  friend User @relation("UserFriendedBy", fields: [friendId], references: [uId])

  @@id([userId, friendId])
}

model Token {
  tId        Int      @id @default(autoincrement())
  iat        DateTime @default(now())
  token      String   @unique
  exp        DateTime
  type       String
  backlisted Boolean
  aId        Int
  account    Account  @relation("UserTokens", fields: [aId], references: [aId])
}

model Group {
  gId          Int           @id @default(autoincrement())
  picture      String?
  name         String        @default("Party gurrrls")
  creationDate DateTime
  description  String?
  owningUser   Int
  owner        User          @relation(fields: [owningUser], references: [uId])
  members      GroupMember[]
  messages     Message[]
  events       Event[]       @relation("AttachedEvents")
  activities   Activity[]    @relation("AttachedActivites")
}

model GroupMember {
  gmId    Int      @id @default(autoincrement())
  userId  Int
  user    User     @relation(fields: [userId], references: [uId])
  groupId Int
  group   Group    @relation(fields: [groupId], references: [gId])
  joined  DateTime
}

model Notification {
  nId       Int      @id @default(autoincrement())
  text      String
  timeStamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [uId])
}
